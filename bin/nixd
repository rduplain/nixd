#!/bin/bash
# nixd v0.3-dev: self-contained configuration management.
#
# Copyright (c) 2012-2013, Ron DuPlain
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# User-configurable environment variables.
declare NIXD_MIRROR # Set to URL pointing to NIXD_SRC directory on mirror.

# Environment variables passed to package scripts. Declare now, set later.
declare NIXD_PREFIX # prefix to use in installation, absolute nixd/usr (static)
declare NIXD_BIN    # path to nixd/bin/ for utilities (static)
declare NIXD_SBIN   # path to nixd/sbin/ for package scripts (static)
declare NIXD_ETC    # path to nixd/etc/, conf for package scripts (static)
declare NIXD_SRC    # path to nixd/src/, dest for package resources (static)
declare NIXD_OPT    # path to nixd/opt/, in some package installations (static)
declare NIXD_VAR    # path to nixd/var/, post-install runtime files (static)
declare NIXD_NAME   # name of package script being called (dynamic)
declare NIXD_RES    # base path where package resources are downloaded (dynamic)

# Functions provided to package scripts written in bash.
#
# Silence output in case nixd is calling itself.
declare -f nixd_echo                 > /dev/null
declare -f nixd_error                > /dev/null
declare -f nixd_run                  > /dev/null
declare -f nixd_ls                   > /dev/null

# Implementation details exposed in environment, set in main function.
declare NIXD_DIR
declare NIXD_VERBOSE
declare NIXD_INVOCATION

# The name of this executable program, set in main function.
declare PROG

usage() {
    # Print nixd program usage to stderr and return 2.

    exec >&2 # Redirect all further stdout to stderr.

    if [ $# -gt 0 ]; then
        # Print message argument, if given.
        echo "$@"
        echo
    fi

    echo "usage: $PROG <command>"
    echo
    echo "Configuration environment variables:"
    echo_environment
    echo
    echo "Commands:"
    echo "install     - Install stack configured by sbin scripts."
    echo "download    - Download all resources declared by sbin scripts."
    echo "selfinstall - Install this nixd executable into a new project."
    return 2
}


# Begin functions exported to package scripts written in bash.
#
# Note that these scripts run in a separate bash process.

nixd_echo() {
    # Echo all arguments on a single line, prefixed by $NIXD_NAME.
    #
    # Does nothing if not in verbose mode.

    if [ -z "$NIXD_VERBOSE" ]; then
        return
    fi

    # See parameter expansion note in main().
    local name=${NIXD_NAME:-$PROG}
    echo "$name: $@"
}

nixd_error() {
    # Echo all arguments on a single line to stderr, prefixed by $NIXD_NAME.
    #
    # Be sure to return/exit with an error code if applicable, after calling.

    # See parameter expansion note in main().
    local name=${NIXD_NAME:-$PROG}
    echo "$name: $@" >&2
}

nixd_run() {
    # A main routine usable by package scripts written in bash.

    local command=$1
    shift

    local command_type=`type -t $command`

    # Exit immediately if a command error or non-zero return occurs.
    set -e

    if [ -z "$command_type" ]; then
        nixd_error "$command is not implemented."
        return 127
    elif [ "$command_type" != "function" ]; then
        nixd_error "$command is not a valid command."
        return 2
    fi

    $command "$@"
}

nixd_ls() {
    # Return success if file exists, error if not.
    #
    # Programs ls and file are more readable, but they have output by default
    # and therefore are verbose during typical nixd execution. This custom
    # implementation also provides name-prefixed logging.

    for path in "$@"; do
        if ( ls $path > /dev/null 2>&1 ); then
            nixd_echo "$path exists."
            return 0
        else
            nixd_error "$path does not exist."
            return 1
        fi
    done
}

# Begin per-package functions.
#
# Each function here follows the same convention: take the path to the package
# script executable as an argument, and if no argument is given, print a short
# (typically one word) user-friendly label of the function's purpose -- to
# support introspection.

quick_check() {
    # Run `exe check` silently.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo quick check # declare this function's purpose
        return
    fi

    $exe check > /dev/null 2>&1
}

install_package() {
    # Downloads resources specified by `exe resources` then runs `exe install`.
    #
    # The install subcommand runs in directory where resources are downloaded.
    # Does nothing if `exe check` reports success (0 status).

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo install # declare this function's purpose
        return
    fi

    nixd_echo "checking..."
    if ( $exe check ); then
        nixd_echo "already installed."
    else
        # Essential '&&': execution stops immediately on error with 'set -e'.
        download_package_resources $exe &&
        run_package_pretest $exe &&
        run_package_install $exe
    fi
}

download_package_resources() {
    # Download resources specified by the package script's 'resource' command.
    #
    # Resources are specified by `exe resources`, providing via stdout newline
    # (\n) delimited URLs with an optional local name, in the format of one of:
    #
    #     <url>
    #     <url><space><local name>
    #
    # For example:
    #
    #     http://example.com/package.tar.gz
    #     http://example.com/1.0/package.tar.gz package-1.0.tar.gz
    #
    # In the first case, the remote name of package.tar.gz is used locally. In
    # the second case, the remote file is downloaded locally to a file named
    # package-1.0.tar.gz.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo download # declare this function's purpose
        return
    fi

    local resources=$( $exe resources )

    if [ -z "$resources" ]; then
        nixd_echo "no resources to download."
        return
    fi

    # Log each resource, prefixed by the nixd name.
    nixd_echo "resources:"
    map_lines nixd_echo "$resources"

    mkdir -p $NIXD_RES

    pushd $NIXD_RES > /dev/null

    # Download each resource.
    map_lines download_resource "$resources"

    # Count the number of lines.
    local -i count=`echo "$resources" | wc -l`

    if [ $count -eq 1 ]; then
        nixd_echo "finished download, 1 resource."
    else
        nixd_echo "finished download, $count resources."
    fi

    popd > /dev/null
}

download_resource() {
    # Peform download, run for each line in the resources output.

    # Understanding arrays in bash:
    #
    # Mind the syntax. Set and access as follows.
    #
    #     array=( some things )
    #     ${array[*]} # "some things"
    #     ${array[0]} # "some"
    #     ${array[1]} # "things"
    #     ${array[2]} # ""
    #
    # Get array length with ${#array[@]}.

    # Full line is passed in as argument.
    local resource=$@

    # Pull tokens into array.
    local tokens=( $resource )

    # Flight check.
    if [ ${#tokens[@]} -eq 0 ]; then
        nixd_error "$NIXD_NAME: No argument given to `download_resource`."
        return 3
    elif [ ${#tokens[@]} -gt 2 ]; then
        nixd_error "$NIXD_NAME: resource error - more than 2 fields: $resource"
        return 3
    fi

    # Parse tokens.
    local url=${tokens[0]}
    local local_name=${tokens[1]}

    # Parse remote name from URL.
    local remote_name="$( basename "$url" )"

    # If local name is not given, use remote name.
    if [ -z "$local_name" ]; then
        local_name=$remote_name
    fi

    # Swap out given URL with mirror if configured.
    if [ -n "$NIXD_MIRROR" ]; then
        url=$NIXD_MIRROR/$NIXD_NAME/$local_name
    fi

    if [ -e $local_name ]; then
        nixd_echo "using existing $local_name"
    else
        nixd_echo "downloading $local_name from $url"
        curl -L -o $local_name $url # Use '-L' to follow redirects.
    fi
}

run_package_pretest() {
    # Run `exe pretest` in the package's resource directory.
    #
    # This resource directory will have anything downloaded for the package,
    # and is still created if no resources are needed, to allow the package
    # script to create any scratch or temporary files.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo pretest # declare this function's purpose
        return
    fi

    mkdir -p $NIXD_RES
    pushd $NIXD_RES > /dev/null

    local result=0
    nixd_echo "running pretest..."
    if ( $exe pretest ); then
        nixd_echo "pretest passed."
    elif [ $? -eq 127 ]; then
        # Not implemented; still returns 0 in run_package_pretest.
        # nixd_run already calls nixd_error with log message.
        pass
    else
        result=$?
        nixd_error "pretest failed with non-zero status: $result"
    fi

    popd > /dev/null
    return $result
}

run_package_install() {
    # Run `exe install` in the package's resource directory.
    #
    # This resource directory will have anything downloaded for the package,
    # and is still created if no resources are needed, to allow the package
    # script to create any scratch or temporary files.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo install # declare this function's purpose
        return
    fi

    mkdir -p $NIXD_RES
    pushd $NIXD_RES > /dev/null

    local result=0
    nixd_echo "installing..."
    if ( $exe install ); then
        nixd_echo "installed."
    else
        result=$?
        nixd_error "install had non-zero status: $result"
    fi

    popd > /dev/null
    return $result
}


# Begin essential utilities for nixd main program.

map_scripts() {
    # Execute <first_argument> for each executable in <second_argument> string.
    #
    # Stop at first failed execution, returning the corresponding exit code.
    #
    # This is useful in mapping the given function to all executables in the
    # nixd sbin directory. Note that the executable paths must be absolute if
    # current working directory changes during the execution of the mapped
    # function.
    #
    # For each executable found, run: `command path/to/executable`.

    local command=$1
    shift

    local label=`$command`

    local count=0
    for exe in $@; do
        # Don't set NIXD_NAME before continue statements.
        local name="$( basename "$exe" )"

        # Skip empty glob '*' and reserved keywords: nixd, all.
        if [ "$name" = "*" ]; then
            continue
        elif [ "$name" = "$PROG" ]; then
            continue
        elif [ "$name" = "all" ]; then
            continue
        fi

        # Set per-package variables.
        export NIXD_NAME="$name"
        export NIXD_RES=$NIXD_SRC/$NIXD_NAME

        if [ -x $exe ]; then
            let count=count+1
            export NIXD_NAME="$( basename "$exe" )"

            # Test for script exit code explicitly. Reasons:
            #
            # 1. 'set -e' has curious behavior for deeply nested commands.
            # 2. Enable override of 'set -e' to continue on script failure.
            if ( $command $exe ); then
                pass
            else
                # Stop now since an execution failed, returning exit code.
                return $?
            fi
        else
            nixd_error "$exe is not executable. Skipping."
        fi

        unset NIXD_NAME NIXD_RES
    done

    if [ $count -eq 0 ]; then
        nixd_error "nothing to run. No scripts found in $NIXD_SBIN."
        return 3
    elif [ $count -eq 1 ]; then
        nixd_echo "finished $label with $count package."
    else
        nixd_echo "finished $label with $count packages."
    fi
}

map_lines() {
    # Execute <first_argument> for each line in <second_argument> string.
    #
    # Understanding the internal field separator (IFS) in bash:
    #
    # The IFS is used in word splitting. To split across lines in a string, a
    # for-loop can simply iterate across that string with IFS set to the
    # newline character. IFS must be restored to support normal operation of
    # any further commands.

    local line_function=$1
    local lines="$2"
    shift 2

    local OLD_IFS="$IFS"
    local NEW_IFS=$'\n' # Specifying ANSI escaped char requires $'string' form.

    IFS="$NEW_IFS"
    local count=0
    for line in $lines; do
        IFS="$OLD_IFS"
        $line_function $line
        IFS="$NEW_IFS"
    done
    IFS="$OLD_IFS"
}

expand_executable_paths() {
    # Expand executable paths "foo bar" to "$NIXD_SBIN/foo $NIXD_SBIN/bar".

    for name in $@; do
        if [ "$name" = "all" ]; then
            # all is an alias for all executables in $NIXD_SBIN.
            echo "$NIXD_SBIN/*"
        else
            echo $NIXD_SBIN/$name
        fi
    done
}

echo_environment() {
    # Print static environment variables to stdout.

    nixd_echo "NIXD_PREFIX: $NIXD_PREFIX"
    nixd_echo "NIXD_BIN:    $NIXD_BIN"
    nixd_echo "NIXD_SBIN:   $NIXD_SBIN"
    nixd_echo "NIXD_ETC:    $NIXD_ETC"
    nixd_echo "NIXD_SRC:    $NIXD_SRC"
    nixd_echo "NIXD_MIRROR: $NIXD_MIRROR"
}

check_for_program() {
    # Check requirements. Verify each of the given programs is installed.
    #
    # Check for program dependencies granularly, which is useful when there are
    # features of nixd which are not essential for simple operations, to check
    # for dependencies lazily.

    for program in $@; do
        if ( ! which $program > /dev/null ); then
            nixd_error "requires '$program' program, but could not find it."
            return 3
        fi
    done
}

pass() {
    # No operation.

    :
}


# Begin trap functions to run when nixd is finishing execution.

trap_int() {
    # Execute on INT signal.

    nixd_echo Interrupted.
}

trap_term() {
    # Execute on TERM signal.

    nixd_echo Terminated.
}


# Begin user-exposed subcommands.

install() {
    # Find all package scripts, download their resources, then install them.

    local paths=""
    if [ $# -eq 0 ]; then
        paths="`expand_executable_paths all`"
    else
        paths="`expand_executable_paths "$@"`"
    fi

    # Stop now if there's no work to do.
    if ( map_scripts quick_check $paths ); then
        nixd_echo "Everything checks out. No work to do."
        return
    fi

    # Since there is work to do, default to verbose.
    export NIXD_VERBOSE=${NIXD_VERBOSE:-"true"}

    # Create additional directories.
    mkdir -p $NIXD_OPT
    mkdir -p $NIXD_VAR

    # Install.
    map_scripts install_package $paths
}

download() {
    # Find all package scripts and download their resources.

    # Default to verbose.
    export NIXD_VERBOSE=${NIXD_VERBOSE:-"true"}

    if [ $# -eq 0 ]; then
        map_scripts download_package_resources `expand_executable_paths all`
    else
        map_scripts download_package_resources `expand_executable_paths "$@"`
    fi
}

selfinstall() {
    # Install this nixd executable into a new project. Go viral.

    if [ $# -eq 0 ]; then
        exec >&2 # Redirect all further stdout to stderr.
        echo "usage: $PROG selfinstall <project_root_filepath>"
        echo
        echo "Provide the filepath to the root of the new project. Examples:"
        echo
        echo "    $PROG selfinstall ."
        echo "    $PROG selfinstall ~/projects/foo"
        return 2
    else
        local destination=$1/nixd/bin
        shift

        mkdir -p $destination
        cp -v $NIXD_BIN/nixd $destination/
    fi
}


# Begin main script.

main() {
    # The main routine of the nixd program itself.

    # Capture full program invocation for debugging.
    NIXD_INVOCATION="${BASH_SOURCE[0]} $*"

    # The name of this executable program.
    PROG="$( basename "${BASH_SOURCE[0]}" )"

    # If NIXD_DIR is already set in the environment, use that value.
    if [ -z "$NIXD_DIR" ]; then
        local script_dir="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        NIXD_DIR="$( dirname "$script_dir" )"
    fi

    # Set configuration environment variables.
    #
    # Each of the documented user-facing variables are user-configurable, using
    # the environment variable if set or nixd's default otherwise. Therefore,
    # each of the variables are set with default value parameter expansion
    # below.
    #
    # Understanding Parameter Expansion in bash:
    #
    #     ${parameter:-word}
    #         Use Default Values. If parameter is unset or null, the expansion
    #         of word is substituted. Otherwise, the value of parameter is
    #         substituted.
    NIXD_PREFIX=${NIXD_PREFIX:-$NIXD_DIR/usr}
    NIXD_BIN=${NIXD_BIN:-$NIXD_DIR/bin}
    NIXD_SBIN=${NIXD_SBIN:-$NIXD_DIR/sbin}
    NIXD_ETC=${NIXD_ETC:-$NIXD_DIR/etc}
    NIXD_SRC=${NIXD_SRC:-$NIXD_DIR/src}
    NIXD_OPT=${NIXD_OPT:-$NIXD_DIR/opt}
    NIXD_VAR=${NIXD_VAR:-$NIXD_DIR/var}

    # Verbose mode.
    # When nixd gets a full command-line parser, this could look for '-v'.
    NIXD_VERBOSE=${NIXD_VERBOSE:-""}

    # Set traps to be clear why nixd exits.
    trap trap_int INT
    trap trap_term TERM

    # Exit immediately if a command error or non-zero return occurs.
    set -e

    # Print usage and exit if there are no arguments.
    if [ $# -eq 0 ]; then
        usage
    fi

    local command=$1
    shift

    if [ "`type -t $command`" != "function" ]; then
        usage "$PROG: $command is not a valid command."
    fi

    check_for_program basename dirname curl wc

    # Export nixd environment variables for use in package scripts.
    export NIXD_PREFIX NIXD_BIN NIXD_SBIN NIXD_ETC NIXD_SRC NIXD_OPT NIXD_VAR
    export NIXD_DIR NIXD_VERBOSE NIXD_INVOCATION

    # Export utility functions for use in package scripts written in bash.
    export -f nixd_echo nixd_error nixd_run nixd_ls

    # Prefix PATH with NIXD_BIN directory.
    export PATH=$NIXD_BIN:$PATH

    $command "$@"
}

main "$@"
