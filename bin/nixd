#!/bin/bash
# nixd: self-contained configuration management.
#
# Copyright (c) 2012, Ron DuPlain
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Environment variables passed to package scripts. Declare now, set later.
declare NIXD_PREFIX # prefix to use in installation, absolute nixd/usr (static)
declare NIXD_BIN    # path to nixd/bin/ for package scripts (static)
declare NIXD_ETC    # path to nixd/etc/, conf for package scripts (static)
declare NIXD_SRC    # path to nixd/src/, dest for package resources (static)
declare NIXD_NAME   # name of package script being called (dynamic)
declare NIXD_RES    # base path where package resources are downloaded (dynamic)

# Functions provided to package scripts written in bash.
declare -f nixd_error
declare -f nixd_run

# Useful variables within this program, set in main function.
declare PROG
declare PROG_DIR

usage() {
    # Print nixd program usage to stderr and exit with status code 1.

    exec >&2 # Redirect all further stdout to stderr.

    if [ $# -gt 0 ]; then
        # Print message argument, if given.
        echo "$@"
        echo
    fi

    echo "usage: $PROG <command>"
    echo
    echo "Configuration variables:"
    echo "NIXD_PREFIX: $NIXD_PREFIX"
    echo "NIXD_BIN:    $NIXD_BIN"
    echo "NIXD_ETC:    $NIXD_ETC"
    echo "NIXD_SRC:    $NIXD_SRC"
    echo
    echo "Commands:"
    echo "boot     - Fully initialize stack specified in configuration."
    echo "download - Download all resources specified in configuration."
    exit 1
}


# Begin functions exported to package scripts written in bash.
#
# Note that these scripts run in a separate bash process.

nixd_error() {
    # Print given message to stderr and exit with status code 2.

    echo "$@" >&2
    exit 2
}

nixd_run() {
    # A main routine usable by package scripts written in bash.

    local command=$1
    shift

    local command_type=`type -t $command`

    # Exit immediately if a command error occurs.
    set -e

    if [ -z "$command_type" ]; then
        nixd_error "$NIXD_NAME: $command is not implemented."
    elif [ "$command_type" != "function" ]; then
        nixd_error "$NIXD_NAME: $command is not a valid command."
    fi

    $command "$@"
}


# Begin per-package functions.
#
# Each function here follows the same convention: take the path to the package
# script executable as an argument, and if no argument is given, print a short
# (typically one word) user-friendly label of the function's purpose -- to
# support introspection.

boot_package() {
    # Downloads resources specified by `exe resources` then runs `exe install`.
    #
    # The install subcommand runs in directory where resources are downloaded.
    # Does nothing if `exe check` reports success (0 status).

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo boot # declare this function's purpose
        return
    fi

    echo "$NIXD_NAME: checking..."
    if ( $exe check ); then
        echo "$NIXD_NAME: already configured."
    else
        download_package_resources $exe
        install_package $exe
    fi
}

download_package_resources() {
    # Download resources specified by the package script's 'resource' command.
    #
    # Resources are specified by `exe resources`, providing via stdout newline
    # (\n) delimited URLs with an optional local name, in the format of one of:
    #
    #     <url>
    #     <url><space><local name>
    #
    # For example:
    #
    #     http://example.com/package.tar.gz
    #     http://example.com/1.0/package.tar.gz package-1.0.tar.gz
    #
    # In the first case, the remote name of package.tar.gz is used locally. In
    # the second case, the remote file is downloaded locally to a file named
    # package-1.0.tar.gz.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo download # declare this function's purpose
        return
    fi

    local resources=$( $exe resources )

    if [ -z "$resources" ]; then
        echo "$NIXD_NAME: no resources to download."
        return 0
    fi

    mkdir -p $NIXD_RES

    # To understand the following code, understand bash IFS and arrays.
    #
    # Understanding the internal field separator (IFS) in bash:
    #
    # The IFS is used in word splitting. To split across lines in a string, a
    # for-loop can simply iterate across that string with IFS set to the
    # newline character. IFS must be restored to support normal operation of
    # any further commands.
    #
    # Understanding arrays in bash:
    #
    # Mind the syntax. Set and access as follows.
    #
    #     array=( some things )
    #     ${array[*]} # "some things"
    #     ${array[0]} # "some"
    #     ${array[1]} # "things"
    #     ${array[2]} # ""

    pushd $NIXD_RES > /dev/null

    local OLD_IFS="$IFS"
    local NEW_IFS=$'\n' # Specifying ANSI escaped char requires $'string' form.

    IFS="$NEW_IFS"
    local count=0
    for line in $resources; do
        let count=count+1
        IFS="$OLD_IFS"

        local tokens=( $line )
        local url=${tokens[0]}
        local local_name=${tokens[1]}

        if [ -n "$local_name" ]; then
            if [ -e $local_name ]; then
                echo "$NIXD_NAME: using existing $local_name"
            else
                echo "$NIXD_NAME: downloading $local_name from $url"
                curl -o $local_name $url
            fi
        else
            local remote_name="$( basename "$url" )"
            if [ -e $remote_name ]; then
                echo "$NIXD_NAME: using existing $remote_name"
            else
                # Use '-o $remote_name' instead of '-O' to guarantee same path.
                # That is, do not assume $remote_name initialization behavior
                # is always identical to curl's implementation, so that the
                # '-e $remote_path' call above always works correctly.
                echo "$NIXD_NAME: downloading $remote_name from $url"
                curl -o $remote_name $url
            fi
        fi

        IFS="$NEW_IFS"
    done
    IFS="$OLD_IFS"

    if [ $count -eq 1 ]; then
        echo "$NIXD_NAME: finished download, 1 resource."
    else
        echo "$NIXD_NAME: finished download, $count resources."
    fi

    popd > /dev/null
}

install_package() {
    # Run `exe install` in the package's resource directory.
    #
    # This resource directory will have anything downloaded for the package,
    # and is still created if no resources are needed, to allow the package
    # script to create any scratch or temporary files.

    local exe=$1
    shift

    if [ -z "$exe" ]; then
        echo install # declare this function's purpose
        return
    fi

    mkdir -p $NIXD_RES
    pushd $NIXD_RES > /dev/null

    echo "$NIXD_NAME: installing..."
    $exe install

    local result=$?
    if [ $result -eq 0 ]; then
        echo "$NIXD_NAME: installed."
    else
        echo "$NIXD_NAME: install had non-zero status: $result"
    fi

    popd > /dev/null
    return $result
}


# Begin essential utilities for nixd main program.

for_each_script() {
    # Find all executables in the nixd bin directory and run a given command.
    #
    # For each executable found, run: `command path/to/executable`.

    local command=$1
    shift

    local label=`$command`

    local count=0
    for exe in $NIXD_BIN/*; do
        export NIXD_NAME="$( basename "$exe" )"
        export NIXD_RES=$NIXD_SRC/$NIXD_NAME

        # Skip the nixd executable itself.
        if [ "$NIXD_NAME" = "$PROG" ]; then
            continue
        fi

        if [ -x $exe ]; then
            let count=count+1
            export NIXD_NAME="$( basename "$exe" )"
            $command $exe
        else
            echo "$NIXD_NAME: $exe is not executable."
        fi
    done

    if [ $count -eq 0 ]; then
        echo "$PROG: nothing to run. No scripts found in $NIXD_BIN."
        return 1
    fi
    echo "$PROG: finished $label with $count packages."
}

check_requirements() {
    # Verify that nixd requirements are installed.

    if ( ! which curl > /dev/null ); then
        echo "$PROG: requires 'curl', but could not find it."
        return 1
    fi
}


# Begin user-exposed subcommands.

boot() {
    # Find all package scripts, download their resources, then install them.
    for_each_script boot_package
}

download() {
    # Find all package scripts and download their resources.
    for_each_script download_package_resources
}


# Begin main script.

main() {
    # The main routine of the nixd program itself.

    PROG="$( basename "${BASH_SOURCE[0]}" )"
    local script_dir="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    PROG_DIR="$( dirname "$script_dir" )"
    NIXD_PREFIX=$PROG_DIR/usr
    NIXD_BIN=$PROG_DIR/bin
    NIXD_ETC=$PROG_DIR/etc
    NIXD_SRC=$PROG_DIR/src

    # Print usage and exit if there are no arguments.
    if [ $# -eq 0 ]; then
        usage
    fi

    local command=$1
    shift

    if [ "`type -t $command`" != "function" ]; then
        usage "$PROG: $command is not a valid command."
    fi

    # Exit immediately if a command error occurs.
    set -e

    check_requirements

    # Export nixd environment variables for use in package scripts.
    export NIXD_PREFIX NIXD_BIN NIXD_ETC
    echo "NIXD_PREFIX: $NIXD_PREFIX"
    echo "NIXD_BIN:    $NIXD_BIN"
    echo "NIXD_ETC:    $NIXD_ETC"
    echo "NIXD_SRC:    $NIXD_SRC"

    # Export utility functions for use in package scripts written in bash.
    export -f nixd_error nixd_run

    $command "$@"
}

main "$@"
